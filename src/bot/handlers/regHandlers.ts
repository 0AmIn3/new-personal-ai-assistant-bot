import { Telegraf } from 'telegraf';
import { AuthContext } from '../middlewares/auth';
import { getTexts } from '../replies';
import {
    generateInvite,
    getUserInvites,
    revokeInvite,
    validateInvite
} from '../../usecases/registration/generateInvite';
import {
    registerEmployee,
    completeRegistration,
    getAllUsers
} from '../../usecases/registration/registerEmployee';
import {
    promoteToOwner,
    demoteFromOwner,
    getOwners,
    getRolesStats
} from '../../usecases/registration/promoteOwner';
import { Language, UserRole } from '../../interfaces/user';
import { errorToUserMessage } from '../../utils/errors';
import { assertValidEmail } from '../../utils/guard';
import Log from '../../utils/log';

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */
interface RegistrationState {
    step: 'waiting_email' | 'confirming';
    inviteToken?: string;
    email?: string;
    createdAt: Date;
}

const registrationStates = new Map<number, RegistrationState>();

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
 */
export function registerRegHandlers(bot: Telegraf<AuthContext>) {
    // –ö–æ–º–∞–Ω–¥–∞ /start —Å —Ç–æ–∫–µ–Ω–æ–º –∏–Ω–≤–∞–π—Ç–∞
    bot.command('start', async (ctx) => {
        const text = ctx.message.text;
        const parts = text.split(' ');

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä - —ç—Ç–æ —Ç–æ–∫–µ–Ω –∏–Ω–≤–∞–π—Ç–∞
        if (parts.length > 1) {
            const token = parts[1];
            await handleInviteToken(ctx, token);
            return;
        }

        // –û–±—ã—á–Ω—ã–π /start
        const lang = ctx.user?.language || Language.RU;
        const t = getTexts(lang);

        if (ctx.user) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            if (ctx.user.role === UserRole.ADMIN || ctx.user.role === UserRole.OWNER) {
                await showAdminMenu(ctx);
            } else {
                await ctx.reply(t.welcome.registered(
                    ctx.user.fullName || ctx.user.username || 'User'
                ));
            }
        } else {
            await ctx.reply(
                'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç!\n\n' +
                '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n' +
                '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É.'
            );
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /invite - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    bot.command('invite', async (ctx) => {
        if (!ctx.user) {
            await ctx.reply('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
            return;
        }

        if (ctx.user.role !== UserRole.ADMIN && ctx.user.role !== UserRole.OWNER) {
            await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
            return;
        }

        const lang = ctx.user.language;

        try {
            const { invite, inviteLink } = await generateInvite(ctx.user.telegramId);

            const expiresIn = Math.round(
                (invite.expiresAt.getTime() - Date.now()) / (1000 * 60 * 60)
            );

            await ctx.reply(
                'üé´ **–ù–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!**\n\n' +
                `üîë –ö–æ–¥: \`${invite.token}\`\n` +
                `üîó –°—Å—ã–ª–∫–∞: ${inviteLink}\n` +
                `‚è± –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ: ${expiresIn} —á–∞—Å–æ–≤\n\n` +
                '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –Ω–æ–≤–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
                { parse_mode: 'Markdown' }
            );

            Log.info(ctx, 'Invite created', { token: invite.token });

        } catch (error) {
            await ctx.reply(errorToUserMessage(error, lang));
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /invites - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    bot.command('invites', async (ctx) => {
        if (!ctx.user) {
            await ctx.reply('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
            return;
        }

        if (ctx.user.role !== UserRole.ADMIN && ctx.user.role !== UserRole.OWNER) {
            await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º');
            return;
        }

        try {
            const invites = await getUserInvites(ctx.user.telegramId, true);

            if (invites.length === 0) {
                await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π');
                return;
            }

            let message = 'üé´ **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:**\n\n';

            for (const { invite, link, status } of invites) {
                const statusEmoji = {
                    active: '‚úÖ',
                    used: 'üë§',
                    expired: '‚è∞',
                }[status];

                message += `${statusEmoji} \`${invite.token}\`\n`;

                if (status === 'active') {
                    const expiresIn = Math.round(
                        (invite.expiresAt.getTime() - Date.now()) / (1000 * 60 * 60)
                    );
                    message += `   –û—Å—Ç–∞–ª–æ—Å—å: ${expiresIn}—á\n`;
                    message += `   [–°—Å—ã–ª–∫–∞](${link})\n`;
                }

                message += '\n';
            }

            await ctx.reply(message, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true,
            });

        } catch (error) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bot.command('users', async (ctx) => {
        if (!ctx.user) {
            await ctx.reply('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
            return;
        }

        if (ctx.user.role !== UserRole.ADMIN && ctx.user.role !== UserRole.OWNER) {
            await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            return;
        }

        try {
            const users = await getAllUsers(ctx.user.telegramId);

            if (users.length === 0) {
                await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            let message = 'üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n';

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
            const byRole = {
                [UserRole.ADMIN]: users.filter(u => u.role === UserRole.ADMIN),
                [UserRole.OWNER]: users.filter(u => u.role === UserRole.OWNER),
                [UserRole.EMPLOYEE]: users.filter(u => u.role === UserRole.EMPLOYEE),
            };

            if (byRole[UserRole.ADMIN].length > 0) {
                message += 'üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:**\n';
                for (const user of byRole[UserRole.ADMIN]) {
                    message += formatUserLine(user);
                }
                message += '\n';
            }

            if (byRole[UserRole.OWNER].length > 0) {
                message += 'üíº **–í–ª–∞–¥–µ–ª—å—Ü—ã:**\n';
                for (const user of byRole[UserRole.OWNER]) {
                    message += formatUserLine(user);
                }
                message += '\n';
            }

            if (byRole[UserRole.EMPLOYEE].length > 0) {
                message += 'üë§ **–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:**\n';
                for (const user of byRole[UserRole.EMPLOYEE].slice(0, 10)) {
                    message += formatUserLine(user);
                }
                if (byRole[UserRole.EMPLOYEE].length > 10) {
                    message += `... –∏ –µ—â—ë ${byRole[UserRole.EMPLOYEE].length - 10}\n`;
                }
            }

            message += `\nüìä –í—Å–µ–≥–æ: ${users.length}`;

            await ctx.reply(message, { parse_mode: 'Markdown' });

        } catch (error) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /promote - –ø–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    bot.command('promote', async (ctx) => {
        if (!ctx.user || ctx.user.role !== UserRole.ADMIN) {
            await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ–≤—ã—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            return;
        }

        const text = ctx.message.text;
        const username = text.replace('/promote', '').trim().replace('@', '');

        if (!username) {
            await ctx.reply(
                '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promote @username\n' +
                '–ü–æ–≤—ã—à–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞'
            );
            return;
        }

        try {
            const users = await getAllUsers(ctx.user.telegramId);
            const targetUser = users.find(u => u.username === username);

            if (!targetUser) {
                await ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return;
            }

            const promoted = await promoteToOwner(targetUser.telegramId, ctx.user.telegramId);

            await ctx.reply(
                `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –ø–æ–≤—ã—à–µ–Ω –¥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞!`
            );

            Log.info(ctx, 'User promoted', {
                targetId: targetUser.telegramId,
                targetUsername: username,
            });

        } catch (error: any) {
            await ctx.reply(`‚ùå ${error.message}`);
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /demote - –ø–æ–Ω–∏–∂–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    bot.command('demote', async (ctx) => {
        if (!ctx.user || ctx.user.role !== UserRole.ADMIN) {
            await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ–Ω–∏–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            return;
        }

        const text = ctx.message.text;
        const username = text.replace('/demote', '').trim().replace('@', '');

        if (!username) {
            await ctx.reply(
                '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /demote @username\n' +
                '–ü–æ–Ω–∏–∂–∞–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'
            );
            return;
        }

        try {
            const users = await getAllUsers(ctx.user.telegramId);
            const targetUser = users.find(u => u.username === username);

            if (!targetUser) {
                await ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return;
            }

            const demoted = await demoteFromOwner(targetUser.telegramId, ctx.user.telegramId);

            await ctx.reply(
                `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –ø–æ–Ω–∏–∂–µ–Ω –¥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞`
            );

            Log.info(ctx, 'User demoted', {
                targetId: targetUser.telegramId,
                targetUsername: username,
            });

        } catch (error: any) {
            await ctx.reply(`‚ùå ${error.message}`);
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    bot.command('stats', async (ctx) => {
        if (!ctx.user) {
            await ctx.reply('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
            return;
        }

        if (ctx.user.role !== UserRole.ADMIN) {
            await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
            return;
        }

        try {
            const rolesStats = await getRolesStats();

            const message = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:**\n\n` +
                `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${rolesStats.total}\n` +
                `üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${rolesStats.byRole[UserRole.ADMIN]}\n` +
                `üíº –í–ª–∞–¥–µ–ª—å—Ü–µ–≤: ${rolesStats.byRole[UserRole.OWNER]}\n` +
                `üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${rolesStats.byRole[UserRole.EMPLOYEE]}\n\n` +
                `üìß –° email: ${rolesStats.withEmail}\n` +
                `üîó –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ Planka: ${rolesStats.withPlanka}`;

            await ctx.reply(message, { parse_mode: 'Markdown' });

        } catch (error) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on('text', async (ctx) => {
        const userId = ctx.from?.id;
        if (!userId) return;

        const text = ctx.message.text;
        const state = registrationStates.get(userId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–Ω–≤–∞–π—Ç–∞
        if (!ctx.user && text.length === 10) {
            await handleInviteToken(ctx, text);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if (state && state.step === 'waiting_email') {
            try {
                assertValidEmail(text);

                state.email = text;
                state.step = 'confirming';

                await ctx.reply(
                    `üìß Email: ${text}\n\n` +
                    '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å email –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π:',
                    {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirm_email' }],
                                [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_registration' }],
                            ],
                        },
                    }
                );
            } catch {
                await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:');
            }
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    bot.on('callback_query', async (ctx) => {
        if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
            await ctx.answerCbQuery();
            return;
        }

        const data = ctx.callbackQuery.data;
        const userId = ctx.from?.id;
        if (!userId) return;

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
        if (data === 'confirm_email') {
            const state = registrationStates.get(userId);

            if (!state || !state.email || !state.inviteToken) {
                await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
                return;
            }

            try {
                const result = await completeRegistration(userId, state.email, true);

                registrationStates.delete(userId);

                let message = '‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n';
                message += `üìß Email: ${state.email}\n`;
                message += `üë§ –†–æ–ª—å: –°–æ—Ç—Ä—É–¥–Ω–∏–∫\n\n`;

                if (result.plankaCredentials) {
                    message += 'üîê **–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Planka:**\n';
                    message += `Email: ${result.plankaCredentials.email}\n`;
                    message += `–ü–∞—Ä–æ–ª—å: \`${result.plankaCredentials.password}\`\n\n`;
                    message += '‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å!';
                }

                message += '\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏.';

                await ctx.editMessageText(message, { parse_mode: 'Markdown' });
                await ctx.answerCbQuery('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

            } catch (error: any) {
                await ctx.answerCbQuery(`‚ùå ${error.message}`);
            }
        }

        // –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if (data === 'cancel_registration') {
            registrationStates.delete(userId);
            await ctx.editMessageText('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
            await ctx.answerCbQuery();
        }
    });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–Ω–≤–∞–π—Ç–∞
 */
async function handleInviteToken(ctx: any, token: string) {
    const userId = ctx.from?.id;
    const username = ctx.from?.username;
    const firstName = ctx.from?.first_name;
    const lastName = ctx.from?.last_name;
    const languageCode = ctx.from?.language_code;

    if (!userId) return;

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const validation = await validateInvite(token);

    if (!validation.valid) {
        await ctx.reply(`‚ùå ${validation.error}`);
        return;
    }

    try {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        const result = await registerEmployee(
            token,
            userId,
            username,
            firstName,
            lastName,
            languageCode
        );

        if (result.needsEmail) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
            registrationStates.set(userId, {
                step: 'waiting_email',
                inviteToken: token,
                createdAt: new Date(),
            });

            await ctx.reply(
                '‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n' +
                'üìß –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:'
            );
        } else {
            await ctx.reply(
                '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n' +
                '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏.'
            );
        }

        Log.info(ctx, 'Employee registered via invite', { token });

    } catch (error: any) {
        await ctx.reply(`‚ùå ${error.message}`);
    }
}

/**
 * –ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é
 */
async function showAdminMenu(ctx: any) {
    const keyboard = {
        inline_keyboard: [
            [{ text: 'üé´ –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', callback_data: 'create_invite' }],
            [{ text: 'üìã –ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', callback_data: 'my_invites' }],
            [{ text: 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'users_list' }],
            [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'system_stats' }],
        ],
    };

    await ctx.reply(
        'üëë **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        {
            parse_mode: 'Markdown',
            reply_markup: keyboard,
        }
    );
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function formatUserLine(user: any): string {
    let line = '  ‚Ä¢ ';

    if (user.username) {
        line += `@${user.username}`;
    } else {
        line += user.fullName || `ID: ${user.telegramId}`;
    }

    if (user.email) {
        line += ' üìß';
    }

    if (user.plankaUserId) {
        line += ' üîó';
    }

    return line + '\n';
}