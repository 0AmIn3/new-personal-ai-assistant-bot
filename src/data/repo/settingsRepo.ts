import { getDb } from '../db';
import { UserSettings, UpdateSettingsInput } from '../../interfaces/user';
import Log from '../../utils/log';

/**
 * –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export const settingsRepo = {
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    get(userId: number): UserSettings | null {
        const db = getDb();

        const stmt = db.prepare(`
      SELECT * FROM settings WHERE user_id = ?
    `);

        const row = stmt.get(userId);

        if (!row) {
            return null;
        }

        return this.mapRowToSettings(row);
    },

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
     */
    getOrDefault(userId: number): UserSettings {
        const settings = this.get(userId);

        if (settings) {
            return settings;
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return {
            userId,
            digestHour: 9,
            digestEnabled: true,
            notificationsEnabled: true,
            createdAt: new Date(),
            updatedAt: new Date(),
        };
    },

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    create(userId: number): UserSettings {
        const db = getDb();

        const stmt = db.prepare(`
      INSERT INTO settings (
        user_id, 
        digest_hour, 
        digest_enabled, 
        notifications_enabled
      ) VALUES (?, 9, 1, 1)
    `);

        try {
            stmt.run(userId);

            Log.info({ userId }, 'User settings created');

            return this.get(userId)!;
        } catch (error: any) {
            if (error.code === 'SQLITE_CONSTRAINT_UNIQUE') {
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                return this.get(userId)!;
            }
            throw error;
        }
    },

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    update(input: UpdateSettingsInput): UserSettings | null {
        const db = getDb();

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        let settings = this.get(input.userId);

        if (!settings) {
            // –°–æ–∑–¥–∞—ë–º –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            this.create(input.userId);
            settings = this.get(input.userId)!;
        }

        const updates: string[] = [];
        const params: any = { userId: input.userId };

        if (input.digestHour !== undefined) {
            updates.push('digest_hour = @digestHour');
            params.digestHour = input.digestHour;
        }

        if (input.digestEnabled !== undefined) {
            updates.push('digest_enabled = @digestEnabled');
            params.digestEnabled = input.digestEnabled ? 1 : 0;
        }

        if (input.notificationsEnabled !== undefined) {
            updates.push('notifications_enabled = @notificationsEnabled');
            params.notificationsEnabled = input.notificationsEnabled ? 1 : 0;
        }

        if (updates.length === 0) {
            return settings;
        }

        updates.push('updated_at = CURRENT_TIMESTAMP');

        const stmt = db.prepare(`
      UPDATE settings 
      SET ${updates.join(', ')}
      WHERE user_id = @userId
    `);

        stmt.run(params);

        Log.info({ userId: input.userId }, 'Settings updated', params);

        return this.get(input.userId);
    },

    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
     */
    setDigestEnabled(userId: number, enabled: boolean): boolean {
        const result = this.update({
            userId,
            digestEnabled: enabled,
        });

        return result !== null;
    },

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
     */
    setDigestHour(userId: number, hour: number): boolean {
        if (hour < 0 || hour > 23) {
            throw new Error('Hour must be between 0 and 23');
        }

        const result = this.update({
            userId,
            digestHour: hour,
        });

        return result !== null;
    },

    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    setNotificationsEnabled(userId: number, enabled: boolean): boolean {
        const result = this.update({
            userId,
            notificationsEnabled: enabled,
        });

        return result !== null;
    },

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –¥–∞–π–¥–∂–µ—Å—Ç–æ–º –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —á–∞—Å
     */
    getUsersForDigest(hour: number): number[] {
        const db = getDb();

        const stmt = db.prepare(`
      SELECT user_id FROM settings 
      WHERE digest_enabled = 1 AND digest_hour = ?
    `);

        const rows = stmt.all(hour) as Array<{ user_id: number }>;

        return rows.map(row => row.user_id);
    },

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
     */
    getUsersWithNotifications(): number[] {
        const db = getDb();

        const stmt = db.prepare(`
      SELECT user_id FROM settings 
      WHERE notifications_enabled = 1
    `);

        const rows = stmt.all() as Array<{ user_id: number }>;

        return rows.map(row => row.user_id);
    },

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    delete(userId: number): boolean {
        const db = getDb();

        const stmt = db.prepare('DELETE FROM settings WHERE user_id = ?');
        const info = stmt.run(userId);

        if (info.changes > 0) {
            Log.info({ userId }, 'Settings deleted');
            return true;
        }

        return false;
    },

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
     */
    getStats(): {
        total: number;
        digestEnabled: number;
        notificationsEnabled: number;
        byDigestHour: Record<number, number>;
    } {
        const db = getDb();

        const totalStmt = db.prepare('SELECT COUNT(*) as count FROM settings');
        const total = (totalStmt.get() as { count: number }).count;

        const digestStmt = db.prepare(
            'SELECT COUNT(*) as count FROM settings WHERE digest_enabled = 1'
        );
        const digestEnabled = (digestStmt.get() as { count: number }).count;

        const notifStmt = db.prepare(
            'SELECT COUNT(*) as count FROM settings WHERE notifications_enabled = 1'
        );
        const notificationsEnabled = (notifStmt.get() as { count: number }).count;

        const hourStmt = db.prepare(`
      SELECT digest_hour, COUNT(*) as count 
      FROM settings 
      WHERE digest_enabled = 1
      GROUP BY digest_hour
    `);
        const hourRows = hourStmt.all() as Array<{ digest_hour: number; count: number }>;

        const byDigestHour: Record<number, number> = {};
        for (const row of hourRows) {
            byDigestHour[row.digest_hour] = row.count;
        }

        return {
            total,
            digestEnabled,
            notificationsEnabled,
            byDigestHour,
        };
    },

    /**
     * –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    bulkUpdate(
        userIds: number[],
        settings: Partial<Omit<UpdateSettingsInput, 'userId'>>
    ): number {
        let updated = 0;

        for (const userId of userIds) {
            const result = this.update({
                userId,
                ...settings,
            });

            if (result) {
                updated++;
            }
        }

        Log.info(
            {},
            'Bulk settings update',
            {
                usersCount: userIds.length,
                updated,
                settings,
            }
        );

        return updated;
    },

    /**
     * –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ë–î –≤ –æ–±—ä–µ–∫—Ç
     */
    mapRowToSettings(row: any): UserSettings {
        return {
            userId: row.user_id,
            digestHour: row.digest_hour,
            digestEnabled: Boolean(row.digest_enabled),
            notificationsEnabled: Boolean(row.notifications_enabled),
            createdAt: new Date(row.created_at),
            updatedAt: new Date(row.updated_at),
        };
    },
};

/**
 * –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */
export const settingsHelpers = {
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    initForUser(userId: number): UserSettings {
        return settingsRepo.create(userId);
    },

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (toggle)
     */
    toggleDigest(userId: number): boolean {
        const settings = settingsRepo.getOrDefault(userId);
        return settingsRepo.setDigestEnabled(userId, !settings.digestEnabled);
    },

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    toggleNotifications(userId: number): boolean {
        const settings = settingsRepo.getOrDefault(userId);
        return settingsRepo.setNotificationsEnabled(userId, !settings.notificationsEnabled);
    },

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    format(settings: UserSettings, lang: 'ru' | 'uz' = 'ru'): string {
        const lines = [];

        if (lang === 'uz') {
            lines.push('‚öôÔ∏è **Sizning sozlamalaringiz:**');
            lines.push('');
            lines.push(`üìä Kunlik dayjest: ${settings.digestEnabled ? '‚úÖ Yoqilgan' : '‚ùå O ªchirilgan'}`);

            if (settings.digestEnabled) {
                lines.push(`‚è∞ Dayjest vaqti: ${settings.digestHour}:00`);
            }

            lines.push(`üîî Bildirishnomalar: ${settings.notificationsEnabled ? '‚úÖ Yoqilgan' : '‚ùå O ªchirilgan'}`);
        } else {
            lines.push('‚öôÔ∏è **–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**');
            lines.push('');
            lines.push(`üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç: ${settings.digestEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}`);

            if (settings.digestEnabled) {
                lines.push(`‚è∞ –í—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞: ${settings.digestHour}:00`);
            }

            lines.push(`üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.notificationsEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}`);
        }

        return lines.join('\n');
    },
};