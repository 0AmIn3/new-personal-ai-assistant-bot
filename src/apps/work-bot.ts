import { Telegraf } from 'telegraf';
import { config, validateConfig } from '../config/env';
import { initDatabase, closeDatabase } from '../data/db';
import { authMiddleware, logCommand, privateOnly, ownerOnly } from '../bot/middlewares/auth';
import { registerWorkHandlers } from '../bot/handlers/workHandlers';
import { setupScheduledJobs } from '../jobs/scheduler';
import Log from '../utils/log';

/**
 * –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞
 */
async function startWorkBot() {
    try {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validateConfig();

        Log.info({}, 'Starting work bot...');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        initDatabase();

        // –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
        const bot = new Telegraf(config.telegram.workBotToken);

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ middleware
        bot.use(logCommand);
        bot.use(authMiddleware);

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        registerWorkHandlers(bot);

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
        await bot.telegram.setMyCommands([
            { command: 'start', description: 'üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' },
            { command: 'help', description: '‚ùì –°–ø—Ä–∞–≤–∫–∞' },
            { command: 'my_tasks', description: 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏' },
            { command: 'create_task', description: 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É' },
            { command: 'stats', description: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' },
            { command: 'deadlines', description: 'üìÖ –î–µ–¥–ª–∞–π–Ω—ã' },
            { command: 'search_tasks', description: 'üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á' },
        ]);

        // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
        setupScheduledJobs();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.catch((error) => {
            Log.error({}, 'Bot error', error);
        });

        // Graceful shutdown
        const shutdown = async (signal: string) => {
            Log.info({}, `Received ${signal}, shutting down...`);

            bot.stop(signal);
            closeDatabase();

            process.exit(0);
        };

        process.once('SIGINT', () => shutdown('SIGINT'));
        process.once('SIGTERM', () => shutdown('SIGTERM'));

        // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        if (config.env.isProduction) {
            // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
            const domain = process.env.WEBHOOK_DOMAIN;
            const port = config.server.port;

            if (domain) {
                await bot.telegram.setWebhook(`${domain}/bot${config.telegram.workBotToken}`);
                bot.startWebhook(`/bot${config.telegram.workBotToken}`, null, port);
                Log.info({}, `Work bot started with webhook on port ${port}`);
            } else {
                // –ï—Å–ª–∏ webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
                await bot.launch();
                Log.info({}, 'Work bot started with polling');
            }
        } else {
            // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
            await bot.launch();
            Log.info({}, 'Work bot started in development mode with polling');
        }

    } catch (error) {
        Log.error({}, 'Failed to start work bot', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (require.main === module) {
    startWorkBot();
}

export { startWorkBot };