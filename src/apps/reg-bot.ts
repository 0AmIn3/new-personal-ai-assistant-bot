import { Telegraf } from 'telegraf';
import { config, validateConfig } from '../config/env';
import { initDatabase, closeDatabase } from '../data/db';
import { authMiddleware, logCommand } from '../bot/middlewares/auth';
import { registerRegHandlers } from '../bot/handlers/regHandlers';
import Log from '../utils/log';

/**
 * –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
 */
async function startRegBot() {
    try {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validateConfig();

        Log.info({}, 'Starting registration bot...');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        initDatabase();

        // –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
        const bot = new Telegraf(config.telegram.regBotToken);

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ middleware
        bot.use(logCommand);
        bot.use(authMiddleware);

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        registerRegHandlers(bot);

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
        await bot.telegram.setMyCommands([
            { command: 'start', description: 'üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é' },
            { command: 'help', description: '‚ùì –°–ø—Ä–∞–≤–∫–∞' },
            { command: 'invite', description: 'üé´ –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–∞–¥–º–∏–Ω)' },
            { command: 'invites', description: 'üìã –ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–∞–¥–º–∏–Ω)' },
            { command: 'users', description: 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω)' },
            { command: 'promote', description: '‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å –¥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–∞–¥–º–∏–Ω)' },
            { command: 'demote', description: '‚¨áÔ∏è –ü–æ–Ω–∏–∑–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–∞–¥–º–∏–Ω)' },
            { command: 'stats', description: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)' },
        ]);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.catch((error) => {
            Log.error({}, 'Registration bot error', error);
        });

        // Graceful shutdown
        const shutdown = async (signal: string) => {
            Log.info({}, `Received ${signal}, shutting down registration bot...`);

            bot.stop(signal);
            closeDatabase();

            process.exit(0);
        };

        process.once('SIGINT', () => shutdown('SIGINT'));
        process.once('SIGTERM', () => shutdown('SIGTERM'));

        // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        if (config.env.isProduction) {
            // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
            const domain = process.env.WEBHOOK_DOMAIN;
            const port = config.server.port + 1; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç

            if (domain) {
                await bot.telegram.setWebhook(`${domain}/regbot${config.telegram.regBotToken}`);
                bot.startWebhook(`/regbot${config.telegram.regBotToken}`, null, port);
                Log.info({}, `Registration bot started with webhook on port ${port}`);
            } else {
                // –ï—Å–ª–∏ webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
                await bot.launch();
                Log.info({}, 'Registration bot started with polling');
            }
        } else {
            // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
            await bot.launch();
            Log.info({}, 'Registration bot started in development mode with polling');
        }

    } catch (error) {
        Log.error({}, 'Failed to start registration bot', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (require.main === module) {
    startRegBot();
}

export { startRegBot };