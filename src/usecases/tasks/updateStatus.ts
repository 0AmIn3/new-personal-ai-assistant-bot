import { Task, TaskStatus } from '../../interfaces/task';
import { User } from '../../interfaces/user';
import { plankaClient } from '../../clients/planka';
import { tasksRepo } from '../../data/repo/tasksRepo';
import { usersRepo } from '../../data/repo/usersRepo';
import { AppError, ErrorCodes } from '../../utils/errors';
import Log from '../../utils/log';

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
 */
export async function updateTaskStatus(
    taskId: string,
    newStatus: TaskStatus,
    userId: number
): Promise<{
    task: Task;
    previousStatus: TaskStatus;
    movedBy: User;
}> {
    Log.info(
        { userId },
        'Updating task status',
        { taskId, newStatus }
    );

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ë–î
    const task = tasksRepo.getByPlankaId(taskId);

    if (!task) {
        throw new AppError(
            ErrorCodes.NOT_FOUND,
            'Task not found',
            { taskId }
        );
    }

    const previousStatus = task.status;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
    if (previousStatus === newStatus) {
        Log.info({ userId }, 'Status not changed', { taskId, status: newStatus });

        const user = usersRepo.getByTelegramId(userId)!;
        return {
            task,
            previousStatus,
            movedBy: user,
        };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    validateStatusTransition(previousStatus, newStatus);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ Planka –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
    const lists = await plankaClient.getBoardLists();
    const targetList = getListForStatus(lists, newStatus);

    if (!targetList) {
        throw new AppError(
            ErrorCodes.PLANKA_ERROR,
            'Target list not found for status',
            { newStatus }
        );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ Planka
    await plankaClient.updateCard(task.plankaCardId!, {
        listId: targetList.id,
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    const updatedTask = tasksRepo.update(task.plankaCardId!, {
        status: newStatus,
    });

    if (!updatedTask) {
        throw new AppError(
            ErrorCodes.DB_ERROR,
            'Failed to update task in database'
        );
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ Planka –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
    const user = usersRepo.getByTelegramId(userId)!;
    const comment = formatStatusChangeComment(previousStatus, newStatus, user);

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    // await plankaClient.addComment(task.plankaCardId!, comment);

    Log.info(
        { userId },
        'Task status updated',
        {
            taskId,
            previousStatus,
            newStatus,
        }
    );

    return {
        task: updatedTask,
        previousStatus,
        movedBy: user,
    };
}

/**
 * –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
 */
export async function bulkUpdateStatus(
    taskIds: string[],
    newStatus: TaskStatus,
    userId: number
): Promise<{
    updated: string[];
    failed: Array<{ taskId: string; error: string }>;
}> {
    const updated: string[] = [];
    const failed: Array<{ taskId: string; error: string }> = [];

    for (const taskId of taskIds) {
        try {
            await updateTaskStatus(taskId, newStatus, userId);
            updated.push(taskId);
        } catch (error: any) {
            failed.push({
                taskId,
                error: error.message || 'Unknown error',
            });
        }
    }

    Log.info(
        { userId },
        'Bulk status update completed',
        {
            total: taskIds.length,
            updated: updated.length,
            failed: failed.length,
        }
    );

    return { updated, failed };
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å—Ç–∞—Ç—É—Å–∞–º–∏
 */
function validateStatusTransition(
    from: TaskStatus,
    to: TaskStatus
): void {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
    const allowedTransitions: Record<TaskStatus, TaskStatus[]> = {
        [TaskStatus.TODO]: [
            TaskStatus.IN_PROGRESS,
            TaskStatus.DONE,
        ],
        [TaskStatus.IN_PROGRESS]: [
            TaskStatus.TODO,
            TaskStatus.IN_REVIEW,
            TaskStatus.DONE,
        ],
        [TaskStatus.IN_REVIEW]: [
            TaskStatus.IN_PROGRESS,
            TaskStatus.DONE,
        ],
        [TaskStatus.DONE]: [
            TaskStatus.TODO,
            TaskStatus.IN_PROGRESS,
        ],
    };

    const allowed = allowedTransitions[from] || [];

    if (!allowed.includes(to)) {
        throw new AppError(
            ErrorCodes.INVALID_STATUS_TRANSITION,
            `Cannot transition from ${from} to ${to}`
        );
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Planka –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
 */
function getListForStatus(
    lists: Array<{ id: string; name: string }>,
    status: TaskStatus
): { id: string; name: string } | undefined {
    // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤
    const statusToListName: Record<TaskStatus, string[]> = {
        [TaskStatus.TODO]: ['todo', '–Ω–æ–≤—ã–µ', '–Ω–æ–≤–∞—è', 'backlog', '–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é'],
        [TaskStatus.IN_PROGRESS]: ['in progress', '–≤ —Ä–∞–±–æ—Ç–µ', 'doing', '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'],
        [TaskStatus.IN_REVIEW]: ['review', '–ø—Ä–æ–≤–µ—Ä–∫–∞', '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', 'testing'],
        [TaskStatus.DONE]: ['done', '–≥–æ—Ç–æ–≤–æ', '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ', 'completed', 'finished'],
    };

    const possibleNames = statusToListName[status] || [];

    // –ò—â–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ –≤–æ–∑–º–æ–∂–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
    for (const name of possibleNames) {
        const list = lists.find(l =>
            l.name.toLowerCase().includes(name.toLowerCase())
        );

        if (list) {
            return list;
        }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã
    const statusToIndex: Record<TaskStatus, number> = {
        [TaskStatus.TODO]: 0,
        [TaskStatus.IN_PROGRESS]: 1,
        [TaskStatus.IN_REVIEW]: 2,
        [TaskStatus.DONE]: lists.length - 1,
    };

    const index = statusToIndex[status];
    return lists[index];
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
 */
function formatStatusChangeComment(
    from: TaskStatus,
    to: TaskStatus,
    user: User
): string {
    const statusNames = {
        [TaskStatus.TODO]: '–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é',
        [TaskStatus.IN_PROGRESS]: '–í —Ä–∞–±–æ—Ç–µ',
        [TaskStatus.IN_REVIEW]: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
        [TaskStatus.DONE]: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
    };

    return `üìä –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω: ${statusNames[from]} ‚Üí ${statusNames[to]}
üë§ ${user.fullName || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
üïê ${new Date().toLocaleString('ru-RU')}`;
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
 */
export async function autoUpdateStatusOnAssign(
    taskId: string,
    assigneeId: number
): Promise<Task | null> {
    const task = tasksRepo.getByPlankaId(taskId);

    if (!task) {
        return null;
    }

    // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤ TODO –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ IN_PROGRESS
    if (task.status === TaskStatus.TODO && assigneeId) {
        const result = await updateTaskStatus(
            taskId,
            TaskStatus.IN_PROGRESS,
            assigneeId
        );

        return result.task;
    }

    return task;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ (–µ—Å–ª–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
 */
export async function getStatusHistory(
    taskId: string
): Promise<Array<{
    from: TaskStatus;
    to: TaskStatus;
    changedBy: number;
    changedAt: Date;
}>> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É task_history –≤ –ë–î
    Log.info({}, 'Status history not implemented yet', { taskId });
    return [];
}