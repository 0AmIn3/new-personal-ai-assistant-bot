import { Telegraf } from 'telegraf';
import { tasksRepo } from '../data/repo/tasksRepo';
import { usersRepo } from '../data/repo/usersRepo';
import { getDb } from '../data/db';
import { config } from '../config/env';
import { getTexts, formatTasksList } from '../bot/replies';
import { UserRole } from '../interfaces/user';
import { TaskStatus } from '../interfaces/task';
import Log from '../utils/log';
import dayjs from 'dayjs';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const bot = new Telegraf(config.telegram.workBotToken);

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
 */
export async function sendDailyDigest(
    type: 'morning' | 'evening'
): Promise<void> {
    Log.job('digest', `Starting ${type} digest...`);

    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        const owners = usersRepo.getAll(UserRole.OWNER);
        const admins = usersRepo.getAll(UserRole.ADMIN);
        const recipients = [...owners, ...admins];

        for (const user of recipients) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const settings = await getUserSettings(user.telegramId);

            if (!settings.digestEnabled) {
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            if (type === 'morning' && settings.digestHour !== 9) {
                continue;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            if (type === 'morning') {
                await sendMorningDigest(user.telegramId);
            } else {
                await sendEveningDigest(user.telegramId);
            }
        }

        Log.job('digest', `${type} digest completed`);

    } catch (error) {
        Log.error({ job: 'digest' }, `Failed to send ${type} digest`, error);
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getUserSettings(userId: number): Promise<{
    digestEnabled: boolean;
    digestHour: number;
    notificationsEnabled: boolean;
}> {
    const db = getDb();

    const stmt = db.prepare(`
    SELECT digest_enabled, digest_hour, notifications_enabled
    FROM settings
    WHERE user_id = ?
  `);

    const row = stmt.get(userId) as any;

    if (!row) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            digestEnabled: true,
            digestHour: 9,
            notificationsEnabled: true,
        };
    }

    return {
        digestEnabled: Boolean(row.digest_enabled),
        digestHour: row.digest_hour,
        notificationsEnabled: Boolean(row.notifications_enabled),
    };
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
 */
async function sendMorningDigest(userId: number): Promise<void> {
    try {
        const user = usersRepo.getByTelegramId(userId);
        if (!user) return;

        const t = getTexts(user.language);
        const today = dayjs().startOf('day');
        const tomorrow = today.add(1, 'day');

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        const db = getDb();
        const todayTasksStmt = db.prepare(`
      SELECT * FROM tasks
      WHERE (assigned_to = ? OR created_by = ?)
        AND due_date >= ?
        AND due_date < ?
        AND status != ?
      ORDER BY due_date ASC
    `);

        const todayTasksRows = todayTasksStmt.all(
            userId,
            userId,
            today.toISOString(),
            tomorrow.toISOString(),
            TaskStatus.DONE
        );

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        const overdueTasksStmt = db.prepare(`
      SELECT * FROM tasks
      WHERE (assigned_to = ? OR created_by = ?)
        AND due_date < ?
        AND status != ?
      ORDER BY due_date DESC
    `);

        const overdueTasksRows = overdueTasksStmt.all(
            userId,
            userId,
            today.toISOString(),
            TaskStatus.DONE
        );

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const lines = [
            t.notifications.digest.morning,
            '',
        ];

        if (todayTasksRows.length > 0) {
            lines.push(t.notifications.digest.tasksToday(todayTasksRows.length));
            lines.push('');

            for (const row of todayTasksRows.slice(0, 5)) {
                const task = tasksRepo.mapRowToTask(row);
                const statusEmoji = {
                    [TaskStatus.TODO]: 'üìã',
                    [TaskStatus.IN_PROGRESS]: '‚ö°',
                    [TaskStatus.IN_REVIEW]: 'üëÄ',
                }[task.status] || 'üìã';

                lines.push(`${statusEmoji} ${task.title}`);

                if (task.dueDate) {
                    const time = dayjs(task.dueDate).format('HH:mm');
                    lines.push(`   ‚è∞ ${time}`);
                }
            }

            if (todayTasksRows.length > 5) {
                lines.push(`   ... –∏ –µ—â—ë ${todayTasksRows.length - 5} –∑–∞–¥–∞—á`);
            }
        } else {
            lines.push('‚úÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç');
        }

        if (overdueTasksRows.length > 0) {
            lines.push('');
            lines.push(t.notifications.digest.tasksOverdue(overdueTasksRows.length));

            for (const row of overdueTasksRows.slice(0, 3)) {
                const task = tasksRepo.mapRowToTask(row);
                const daysOverdue = dayjs().diff(dayjs(task.dueDate), 'day');
                lines.push(`üî¥ ${task.title} (${daysOverdue} –¥–Ω.)`);
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É
        lines.push('');
        lines.push(getMotivationalQuote(user.language));

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        const keyboard = {
            inline_keyboard: [
                [{ text: 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'my_tasks' }],
                [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }],
            ]
        };

        await bot.telegram.sendMessage(userId, lines.join('\n'), {
            parse_mode: 'Markdown',
            reply_markup: keyboard,
        });

        Log.info({ userId }, 'Morning digest sent', {
            todayTasks: todayTasksRows.length,
            overdueTasks: overdueTasksRows.length,
        });

    } catch (error) {
        Log.error({ userId }, 'Failed to send morning digest', error);
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
 */
async function sendEveningDigest(userId: number): Promise<void> {
    try {
        const user = usersRepo.getByTelegramId(userId);
        if (!user) return;

        const t = getTexts(user.language);
        const today = dayjs().startOf('day');
        const tomorrow = today.add(1, 'day');

        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á–∏
        const db = getDb();
        const completedStmt = db.prepare(`
      SELECT COUNT(*) as count FROM tasks
      WHERE (assigned_to = ? OR created_by = ?)
        AND status = ?
        AND updated_at >= ?
        AND updated_at < ?
    `);

        const completed = completedStmt.get(
            userId,
            userId,
            TaskStatus.DONE,
            today.toISOString(),
            tomorrow.toISOString()
        ) as { count: number };

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        const tomorrowTasksStmt = db.prepare(`
      SELECT * FROM tasks
      WHERE (assigned_to = ? OR created_by = ?)
        AND due_date >= ?
        AND due_date < ?
        AND status != ?
      ORDER BY due_date ASC
    `);

        const tomorrowTasksRows = tomorrowTasksStmt.all(
            userId,
            userId,
            tomorrow.toISOString(),
            tomorrow.add(1, 'day').toISOString(),
            TaskStatus.DONE
        );

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const lines = [
            t.notifications.digest.evening,
            '',
        ];

        if (completed.count > 0) {
            lines.push(t.notifications.digest.tasksCompleted(completed.count));
            lines.push('');
        }

        if (tomorrowTasksRows.length > 0) {
            lines.push('üìÖ **–ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:**');

            for (const row of tomorrowTasksRows.slice(0, 5)) {
                const task = tasksRepo.mapRowToTask(row);
                const priorityEmoji = {
                    '–Ω–∏–∑–∫–∏–π': 'üü¢',
                    '—Å—Ä–µ–¥–Ω–∏–π': 'üü°',
                    '–≤—ã—Å–æ–∫–∏–π': 'üü†',
                    '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π': 'üî¥',
                }[task.priority] || '';

                lines.push(`‚Ä¢ ${task.title} ${priorityEmoji}`);
            }

            if (tomorrowTasksRows.length > 5) {
                lines.push(`‚Ä¢ ... –∏ –µ—â—ë ${tomorrowTasksRows.length - 5} –∑–∞–¥–∞—á`);
            }
        } else {
            lines.push('‚ú® –ù–∞ –∑–∞–≤—Ç—Ä–∞ –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏ –¥–Ω—è
        lines.push('');
        lines.push(getDailySummary(userId, user.language));

        await bot.telegram.sendMessage(userId, lines.join('\n'), {
            parse_mode: 'Markdown',
        });

        Log.info({ userId }, 'Evening digest sent', {
            completed: completed.count,
            tomorrowTasks: tomorrowTasksRows.length,
        });

    } catch (error) {
        Log.error({ userId }, 'Failed to send evening digest', error);
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã
 */
function getMotivationalQuote(lang: 'ru' | 'uz'): string {
    const quotes = {
        ru: [
            'üí™ –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –¥–µ–ª!',
            'üöÄ –ö–∞–∂–¥–∞—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ - —à–∞–≥ –∫ —Ü–µ–ª–∏!',
            '‚≠ê –°–µ–≥–æ–¥–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –≤—á–µ—Ä–∞!',
            'üéØ –§–æ–∫—É—Å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!',
            '‚ú® –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!',
        ],
        uz: [
            'üí™ Buyuk ishlar uchun ajoyib kun!',
            'üöÄ Har bir bajarilgan vazifa - maqsadga qadam!',
            '‚≠ê Bugun siz kechagidan ko ªproq qila olasiz!',
            'üéØ Asosiyga e ºtibor - muvaffaqiyat kaliti!',
            '‚ú® Samarali kun bo ªlsin!',
        ],
    };

    const quotesForLang = quotes[lang] || quotes.ru;
    return quotesForLang[Math.floor(Math.random() * quotesForLang.length)];
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
 */
function getDailySummary(userId: number, lang: 'ru' | 'uz'): string {
    const db = getDb();
    const today = dayjs().startOf('day');
    const tomorrow = today.add(1, 'day');

    // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
    const stats = db.prepare(`
    SELECT 
      COUNT(CASE WHEN status = 'done' AND updated_at >= ? AND updated_at < ? THEN 1 END) as completed,
      COUNT(CASE WHEN status = 'in_progress' THEN 1 END) as in_progress,
      COUNT(CASE WHEN due_date < CURRENT_TIMESTAMP AND status != 'done' THEN 1 END) as overdue
    FROM tasks
    WHERE assigned_to = ? OR created_by = ?
  `).get(
        today.toISOString(),
        tomorrow.toISOString(),
        userId,
        userId
    ) as { completed: number; in_progress: number; overdue: number };

    if (lang === 'uz') {
        return `üìä **Kun natijalari:**
‚Ä¢ Bajarildi: ${stats.completed}
‚Ä¢ Jarayonda: ${stats.in_progress}
${stats.overdue > 0 ? `‚Ä¢ Muddati o ªtgan: ${stats.overdue}` : ''}`;
    }

    return `üìä **–ò—Ç–æ–≥–∏ –¥–Ω—è:**
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.completed}
‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: ${stats.in_progress}
${stats.overdue > 0 ? `‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: ${stats.overdue}` : ''}`;
}